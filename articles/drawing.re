= 図形を描いてみよう

//lead{
この章では、Pyxelを使ってさまざまな図形を描く方法を学びます。
//}

== 図形描画の基本

Pyxelでは、点、線、四角形、円などのさまざまな図形を簡単に描くことができます。これらの図形を組み合わせることで、キャラクターや背景などを作ることができます。

図形を描くコマンドは、すべて`draw`関数の中に書きます。

== 基本的なプログラム構造

まずは、図形を描くための基本的なプログラム構造を確認しましょう。

//list[basic_structure][基本的なプログラム構造][python]{
import pyxel

# Pyxelを初期化
pyxel.init(160, 120, title="図形を描こう")

# 画面を更新する関数
def update():
    # ESCキーが押されたら終了
    if pyxel.btnp(pyxel.KEY_ESCAPE):
        pyxel.quit()

# 画面を描画する関数
def draw():
    # 画面を黒色（0）でクリア
    pyxel.cls(0)

    # ここに図形を描くコードを書きます

# Pyxelの実行
pyxel.run(update, draw)
//}

このプログラムをファイル名「drawing.py」として保存し、これから学ぶ図形描画のコードを`draw`関数の中に追加していきます。

== 点を描く

最も基本的な図形は「点」です。点を描くには、`pset`関数を使います。

//list[draw_point][点を描く][python]{
# 点を描く
pyxel.pset(80, 60, 7)  # 座標(80, 60)に白色(7)の点を描く
pyxel.pset(85, 65, 8)  # 座標(85, 65)に赤色(8)の点を描く
pyxel.pset(75, 65, 12) # 座標(75, 65)に青色(12)の点を描く
//}

//image[draw_point_image][点を描いた例]{
//}

== 線を描く

2点を結ぶ線を描くには、`line`関数を使います。

//list[draw_line][線を描く][python]{
# 線を描く
pyxel.line(30, 30, 130, 90, 7)   # 座標(30, 30)から(130, 90)まで白色(7)の線を描く
pyxel.line(30, 90, 130, 30, 8)   # 座標(30, 90)から(130, 30)まで赤色(8)の線を描く
pyxel.line(80, 20, 80, 100, 11)  # 座標(80, 20)から(80, 100)まで黄緑色(11)の線を描く
//}

//image[draw_line_image][線を描いた例]{
//}

== 四角形を描く

四角形を描くには、`rect`関数を使います。

//list[draw_rect][四角形を描く][python]{
# 四角形を描く
pyxel.rect(10, 10, 40, 30, 7)    # 座標(10, 10)から幅40、高さ30の白色(7)の四角形を描く
pyxel.rect(60, 40, 50, 40, 8)    # 座標(60, 40)から幅50、高さ40の赤色(8)の四角形を描く
pyxel.rect(30, 70, 70, 20, 12)   # 座標(30, 70)から幅70、高さ20の青色(12)の四角形を描く
//}

//image[draw_rect_image][四角形を描いた例]{
//}

`rect`関数の引数は次のとおりです。

 * 第1引数：左上のX座標
 * 第2引数：左上のY座標
 * 第3引数：幅（横幅）
 * 第4引数：高さ
 * 第5引数：色

== 枠だけの四角形を描く

枠だけの四角形（中が塗りつぶされていない四角形）を描くには、`rectb`関数を使います。

//list[draw_rectb][枠だけの四角形を描く][python]{
# 枠だけの四角形を描く
pyxel.rectb(10, 10, 40, 30, 7)   # 座標(10, 10)から幅40、高さ30の白色(7)の枠を描く
pyxel.rectb(60, 40, 50, 40, 8)   # 座標(60, 40)から幅50、高さ40の赤色(8)の枠を描く
pyxel.rectb(30, 70, 70, 20, 12)  # 座標(30, 70)から幅70、高さ20の青色(12)の枠を描く
//}

//image[draw_rectb_image][枠だけの四角形を描いた例]{
//}

== 円を描く

円を描くには、`circ`関数を使います。

//list[draw_circ][円を描く][python]{
# 円を描く
pyxel.circ(40, 30, 10, 7)    # 座標(40, 30)を中心に半径10の白色(7)の円を描く
pyxel.circ(80, 60, 20, 8)    # 座標(80, 60)を中心に半径20の赤色(8)の円を描く
pyxel.circ(120, 90, 15, 12)  # 座標(120, 90)を中心に半径15の青色(12)の円を描く
//}

//image[draw_circ_image][円を描いた例]{
//}

`circ`関数の引数は次のとおりです。

 * 第1引数：中心のX座標
 * 第2引数：中心のY座標
 * 第3引数：半径
 * 第4引数：色

== 枠だけの円を描く

枠だけの円（中が塗りつぶされていない円）を描くには、`circb`関数を使います。

//list[draw_circb][枠だけの円を描く][python]{
# 枠だけの円を描く
pyxel.circb(40, 30, 10, 7)   # 座標(40, 30)を中心に半径10の白色(7)の円の枠を描く
pyxel.circb(80, 60, 20, 8)   # 座標(80, 60)を中心に半径20の赤色(8)の円の枠を描く
pyxel.circb(120, 90, 15, 12) # 座標(120, 90)を中心に半径15の青色(12)の円の枠を描く
//}

//image[draw_circb_image][枠だけの円を描いた例]{
//}

== 三角形を描く

三角形を描くには、`tri`関数を使います。

//list[draw_tri][三角形を描く][python]{
# 三角形を描く
pyxel.tri(80, 20, 50, 80, 110, 80, 7)   # 白色(7)の三角形を描く
pyxel.tri(80, 30, 60, 70, 100, 70, 8)   # 赤色(8)の三角形を描く
//}

//image[draw_tri_image][三角形を描いた例]{
//}

`tri`関数の引数は次のとおりです。

 * 第1引数：1つ目の頂点のX座標
 * 第2引数：1つ目の頂点のY座標
 * 第3引数：2つ目の頂点のX座標
 * 第4引数：2つ目の頂点のY座標
 * 第5引数：3つ目の頂点のX座標
 * 第6引数：3つ目の頂点のY座標
 * 第7引数：色

== 枠だけの三角形を描く

枠だけの三角形（中が塗りつぶされていない三角形）を描くには、`trib`関数を使います。

//list[draw_trib][枠だけの三角形を描く][python]{
# 枠だけの三角形を描く
pyxel.trib(80, 20, 50, 80, 110, 80, 7)  # 白色(7)の三角形の枠を描く
pyxel.trib(80, 30, 60, 70, 100, 70, 8)  # 赤色(8)の三角形の枠を描く
//}

//image[draw_trib_image][枠だけの三角形を描いた例]{
//}

== 図形を組み合わせる

これまで学んだ図形を組み合わせて、簡単な絵を描いてみましょう。例えば、家の絵を描いてみます。

//list[draw_house][家の絵を描く][python]{
# 家の絵を描く
# 家の本体（四角形）
pyxel.rect(50, 50, 60, 40, 4)  # 茶色(4)の四角形

# 屋根（三角形）
pyxel.tri(50, 50, 80, 20, 110, 50, 8)  # 赤色(8)の三角形

# ドア
pyxel.rect(70, 70, 20, 20, 5)  # 暗い青色(5)の四角形

# 窓
pyxel.rect(60, 55, 10, 10, 7)  # 白色(7)の四角形
pyxel.rect(90, 55, 10, 10, 7)  # 白色(7)の四角形

# 煙突
pyxel.rect(95, 30, 10, 20, 14)  # 灰色(14)の四角形
//}

//image[draw_house_image][家の絵の例]{
//}

== 完成したプログラム

これまで学んだ図形描画の方法を使って、完成したプログラムを作ってみましょう。

//list[complete_program][完成したプログラム][python]{
import pyxel

# Pyxelを初期化
pyxel.init(160, 120, title="図形を描こう")

# 画面を更新する関数
def update():
    # ESCキーが押されたら終了
    if pyxel.btnp(pyxel.KEY_ESCAPE):
        pyxel.quit()

# 画面を描画する関数
def draw():
    # 画面を水色(6)でクリア（空の色）
    pyxel.cls(6)

    # 太陽
    pyxel.circ(120, 30, 15, 10)  # 黄色(10)の円

    # 地面
    pyxel.rect(0, 100, 160, 20, 11)  # 黄緑色(11)の四角形

    # 家の本体
    pyxel.rect(50, 60, 60, 40, 4)  # 茶色(4)の四角形

    # 屋根
    pyxel.tri(50, 60, 80, 30, 110, 60, 8)  # 赤色(8)の三角形

    # ドア
    pyxel.rect(70, 80, 20, 20, 5)  # 暗い青色(5)の四角形
    pyxel.circ(75, 90, 2, 0)  # 黒色(0)の円（ドアノブ）

    # 窓
    pyxel.rect(60, 65, 10, 10, 7)  # 白色(7)の四角形
    pyxel.rect(90, 65, 10, 10, 7)  # 白色(7)の四角形

    # 煙突
    pyxel.rect(95, 40, 10, 20, 14)  # 灰色(14)の四角形

    # 木
    pyxel.rect(20, 70, 10, 30, 4)  # 茶色(4)の四角形（幹）
    pyxel.circ(25, 60, 15, 3)  # 緑色(3)の円（葉）

    # 雲
    pyxel.circ(30, 25, 10, 7)  # 白色(7)の円
    pyxel.circ(40, 25, 10, 7)  # 白色(7)の円
    pyxel.circ(50, 25, 10, 7)  # 白色(7)の円

    # 文字
    pyxel.text(55, 10, "My First Drawing", 0)  # 黒色(0)の文字

# Pyxelの実行
pyxel.run(update, draw)
//}

このプログラムを実行すると、家と木と太陽がある簡単な風景が描かれます。

//image[complete_program_image][完成したプログラムの実行結果]{
//}

== まとめ

この章では、Pyxelを使ってさまざまな図形を描く方法を学びました。

 * 点を描く：`pset`関数
 * 線を描く：`line`関数
 * 四角形を描く：`rect`関数（塗りつぶし）、`rectb`関数（枠のみ）
 * 円を描く：`circ`関数（塗りつぶし）、`circb`関数（枠のみ）
 * 三角形を描く：`tri`関数（塗りつぶし）、`trib`関数（枠のみ）
 * 図形を組み合わせて絵を描く方法

これらの図形描画の命令を使いこなせば、さまざまな絵を描くことができます。次の章では、キャラクターを動かす方法を学びます。

== チャレンジ問題

1. 自分の好きな色や形を使って、家の絵を変更してみよう。例えば、家の色を変えたり、窓の形を変えたりしてみよう。

2. 完成したプログラムに、次のものを追加してみよう。
   * 別の木
   * 花
   * 動物（猫や犬など）
   * 虹
   * 星

3. 自分だけのキャラクターを図形を組み合わせて描いてみよう。例えば、ロボットやモンスターなど、想像力を働かせて描いてみよう。